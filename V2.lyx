#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{indentfirst}
\setmainfont[BoldFont=STSong,ItalicFont=STKaiti]{STSong}
\setsansfont[BoldFont=STHeiti]{STHeiti}
\setmonofont{STFangsong}
\XeTeXlinebreaklocale "zh"
\XeTeXlinebreakskip = 0pt plus 1pt
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language chinese-simplified
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics xetex
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "背包问题九讲"
\pdf_author "崔添翼"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 2
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
背包问题九讲2.0
\end_layout

\begin_layout Author
崔添翼 (Tianyi Cui, a.k.a.
 dd_engi)
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
01背包问题
\end_layout

\begin_layout Subsection
题目
\end_layout

\begin_layout Standard
有
\begin_inset Formula $N$
\end_inset

件物品和一个容量为
\begin_inset Formula $V$
\end_inset

的背包。放入第
\begin_inset Formula $i$
\end_inset

件物品耗费的空间是
\begin_inset Formula $C_{i}$
\end_inset

，得到的价值是
\begin_inset Formula $W_{i}$
\end_inset

。求解将哪些物品装入背包可使价值总和最大。
\end_layout

\begin_layout Subsection
基本思路
\end_layout

\begin_layout Standard
这是最基础的背包问题，特点是：每种物品仅有一件，可以选择放或不放。
\end_layout

\begin_layout Standard
用子问题定义状态：即
\begin_inset Formula $F[i,v]$
\end_inset

表示前
\begin_inset Formula $i$
\end_inset

件物品恰放入一个容量为
\begin_inset Formula $v$
\end_inset

的背包可以获得的最大价值。则其状态转移方程便是：
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
F[i,v]=\mathrm{max}\{F[i-1,v],F[i-1,v-C_{i}]+W_{i}\}
\]

\end_inset


\end_layout

\begin_layout Standard
这个方程非常重要，基本上所有跟背包相关的问题的方程都是由它衍生出来的。所以有必要将它详细解释一下：“将前
\begin_inset Formula $i$
\end_inset

件物品放入容量为
\begin_inset Formula $v$
\end_inset

的背包中”这个子问题，若只考虑第
\begin_inset Formula $i$
\end_inset

件物品的策略（放或不放），那么就可以转化为一个只和前
\begin_inset Formula $i-1$
\end_inset

件物品相关的问题。如果不放第
\begin_inset Formula $i$
\end_inset

件物品，那么问题就转化为“前
\begin_inset Formula $i-1$
\end_inset

件物品放入容量为
\begin_inset Formula $v$
\end_inset

的背包中”，价值为
\begin_inset Formula $F[i-1,v]$
\end_inset

；如果放第
\begin_inset Formula $i$
\end_inset

件物品，那么问题就转化为“前
\begin_inset Formula $i-1$
\end_inset

件物品放入剩下的容量为
\begin_inset Formula $v-C_{i}$
\end_inset

的背包中”，此时能获得的最大价值就是
\begin_inset Formula $F[i-1,v-C_{i}]$
\end_inset

再加上通过放入第
\begin_inset Formula $i$
\end_inset

件物品获得的价值
\begin_inset Formula $W_{i}$
\end_inset

。
\end_layout

\begin_layout Standard
伪代码如下：
\end_layout

\begin_layout LyX-Code
\begin_inset Formula $F[0,0..V]=0$
\end_inset


\end_layout

\begin_layout LyX-Code
for 
\begin_inset Formula $i$
\end_inset

 = 
\begin_inset Formula $1$
\end_inset

 to 
\begin_inset Formula $N$
\end_inset


\end_layout

\begin_layout LyX-Code
    for 
\begin_inset Formula $v$
\end_inset

 = 
\begin_inset Formula $C_{i}$
\end_inset

 to 
\begin_inset Formula $V$
\end_inset


\end_layout

\begin_layout LyX-Code
        
\begin_inset Formula $F[i,v]$
\end_inset

 = 
\begin_inset Formula $\mathrm{max}\{F[i-1,v],F[i-1,v-C_{i}]+W_{i}\}$
\end_inset


\end_layout

\begin_layout Subsection
优化空间复杂度 
\end_layout

\begin_layout Standard
以上方法的时间和空间复杂度均为
\begin_inset Formula $O(VN)$
\end_inset

，其中时间复杂度应该已经不能再优化了，但空间复杂度却可以优化到
\begin_inset Formula $O(V)$
\end_inset

。
\end_layout

\begin_layout Standard
先考虑上面讲的基本思路如何实现，肯定是有一个主循环
\begin_inset Formula $i=1..N$
\end_inset

，每次算出来二维数组
\begin_inset Formula $F[i,0..V]$
\end_inset

的所有值。那么，如果只用一个数组
\begin_inset Formula $F[0..V]$
\end_inset

，能不能保证第
\begin_inset Formula $i$
\end_inset

次循环结束后
\begin_inset Formula $F[v]$
\end_inset

中表示的就是我们定义的状态
\begin_inset Formula $F[i,v]$
\end_inset

呢？
\begin_inset Formula $F[i,v]$
\end_inset

是由
\begin_inset Formula $F[i-1,v]$
\end_inset

和
\begin_inset Formula $F[i-1,v-C_{i}]$
\end_inset

两个子问题递推而来，能否保证在推
\begin_inset Formula $F[i,v]$
\end_inset

时（也即在第
\begin_inset Formula $i$
\end_inset

次主循环中推
\begin_inset Formula $F[v]$
\end_inset

时）能够取用
\begin_inset Formula $F[i-1,v]$
\end_inset

和
\begin_inset Formula $F[i-1,v-C_{i}]$
\end_inset

的值呢？事实上，这要求在每次主循环中我们以
\begin_inset Formula $v=V..0$
\end_inset

的递减顺序计算
\begin_inset Formula $F[v]$
\end_inset

，这样才能保证推
\begin_inset Formula $F[v]$
\end_inset

时
\begin_inset Formula $F[v-C_{i}]$
\end_inset

保存的是状态
\begin_inset Formula $F[i-1,v-C_{i]}$
\end_inset

的值。伪代码如下：
\end_layout

\begin_layout LyX-Code
\begin_inset Formula $F[0..V]=0$
\end_inset


\end_layout

\begin_layout LyX-Code
for 
\begin_inset Formula $i$
\end_inset

 = 
\begin_inset Formula $1$
\end_inset

 to 
\begin_inset Formula $N$
\end_inset


\end_layout

\begin_layout LyX-Code
    for 
\begin_inset Formula $v$
\end_inset

 = 
\begin_inset Formula $V$
\end_inset

 to 
\begin_inset Formula $C_{i}$
\end_inset


\end_layout

\begin_layout LyX-Code
        
\begin_inset Formula $F[v]$
\end_inset

 = 
\begin_inset Formula $\mathrm{max}\{F[v],F[v-C_{i}]+W_{i}\}$
\end_inset


\end_layout

\begin_layout Standard
其中的
\begin_inset Formula $F[v]=\mathrm{max}\{F[v],F[v-C_{i}]+W_{i}\}$
\end_inset

一句，恰就对应于我们原来的转移方程，因为现在的
\begin_inset Formula $F[v-C_{i}]$
\end_inset

就相当于原来的
\begin_inset Formula $F[i-1,v-C_{i}]$
\end_inset

。如果将
\begin_inset Formula $v$
\end_inset

的循环顺序从上面的逆序改成顺序的话，那么则成了
\begin_inset Formula $F[i,v]$
\end_inset

由
\begin_inset Formula $F[i,v-C_{i}]$
\end_inset

推导得到，与本题意不符。
\end_layout

\begin_layout Standard
事实上，使用一维数组解01背包的程序在后面会被多次用到，所以这里抽象出一个处理一件01背包中的物品过程，以后的代码中直接调用不加说明。
\end_layout

\begin_layout LyX-Code
def 
\begin_inset Formula $\mathsf{ZeroOnePack}$
\end_inset

(
\begin_inset Formula $F,C,W$
\end_inset

)
\end_layout

\begin_layout LyX-Code
    for 
\begin_inset Formula $v$
\end_inset

 = 
\begin_inset Formula $V$
\end_inset

 to 
\begin_inset Formula $C$
\end_inset


\end_layout

\begin_layout LyX-Code
        
\begin_inset Formula $F[v]$
\end_inset

 = 
\begin_inset Formula $\mathrm{max}(F[v],f[v-C]+W)$
\end_inset


\end_layout

\begin_layout Standard
有了这个过程以后，01背包问题的伪代码就可以这样写：
\end_layout

\begin_layout LyX-Code
for i = 
\begin_inset Formula $1$
\end_inset

 to 
\begin_inset Formula $N$
\end_inset


\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $\mathsf{ZeroOnePack}$
\end_inset

(
\begin_inset Formula $F,C_{i},W_{i}$
\end_inset

)
\end_layout

\begin_layout Subsection
初始化的细节问题
\end_layout

\begin_layout Standard
我们看到的求最优解的背包问题题目中，事实上有两种不太相同的问法。有的题目要求“恰好装满背包”时的最优解，有的题目则并没有要求必须把背包装满。一种区别这两种问法的
实现方法是在初始化的时候有所不同。
\end_layout

\begin_layout Standard
如果是第一种问法，要求恰好装满背包，那么在初始化时除了
\begin_inset Formula $F[0]$
\end_inset

为
\begin_inset Formula $0$
\end_inset

，其它
\begin_inset Formula $F[1..V]$
\end_inset

均设为
\begin_inset Formula $-\infty$
\end_inset

，这样就可以保证最终得到的
\begin_inset Formula $F[V]$
\end_inset

是一种恰好装满背包的最优解。
\end_layout

\begin_layout Standard
如果并没有要求必须把背包装满，而是只希望价格尽量大，初始化时应该将
\begin_inset Formula $F[0..V]$
\end_inset

全部设为
\begin_inset Formula $0$
\end_inset

。
\end_layout

\begin_layout Standard
这是为什么呢？可以这样理解：初始化的
\begin_inset Formula $F$
\end_inset

数组事实上就是在没有任何物品可以放入背包时的合法状态。如果要求背包恰好装满，那么此时只有容量为
\begin_inset Formula $0$
\end_inset

的背包可以在什么也不装且价值为
\begin_inset Formula $0$
\end_inset

的情况下被“恰好装满”，其它容量的背包均没有合法的解，属于未定义的状态，应该被赋值为-∞了。如果背包并非必须被装满，那么任何容量的背包都有一个合法解“什么都不装
”，这个解的价值为
\begin_inset Formula $0$
\end_inset

，所以初始时状态的值也就全部为
\begin_inset Formula $0$
\end_inset

了。
\end_layout

\begin_layout Standard
这个小技巧完全可以推广到其它类型的背包问题，后面也就不再对进行状态转移之前的初始化进行讲解。
\end_layout

\begin_layout Subsection
一个常数优化
\end_layout

\begin_layout Standard
上面伪代码中的
\end_layout

\begin_layout LyX-Code
for 
\begin_inset Formula $i$
\end_inset

 = 
\begin_inset Formula $1$
\end_inset

 to 
\begin_inset Formula $N$
\end_inset


\end_layout

\begin_layout LyX-Code
    for 
\begin_inset Formula $v$
\end_inset

 = 
\begin_inset Formula $V$
\end_inset

 to 
\begin_inset Formula $C_{i}$
\end_inset


\end_layout

\begin_layout Standard
中第二重循环的下限可以改进。它可以被优化为
\end_layout

\begin_layout LyX-Code
for 
\begin_inset Formula $i$
\end_inset

 = 
\begin_inset Formula $1$
\end_inset

 to 
\begin_inset Formula $N$
\end_inset


\end_layout

\begin_layout LyX-Code
    for 
\begin_inset Formula $v$
\end_inset

 = 
\begin_inset Formula $V$
\end_inset

 to 
\begin_inset Formula $\mathrm{max}(V-\Sigma_{i}^{N}W_{i},C_{i})$
\end_inset


\end_layout

\begin_layout Standard
这个优化之所以成立的原因请读者自己思考。（提示：使用二维的转移方程思考较易。）
\end_layout

\begin_layout Subsection
小结
\end_layout

\begin_layout Standard
01背包问题是最基本的背包问题，它包含了背包问题中设计状态、方程的最基本思想。另外，别的类型的背包问题往往也可以转换成01背包问题求解。故一定要仔细体会上面基本
思路的得出方法，状态转移方程的意义，以及空间复杂度怎样被优化。
\end_layout

\begin_layout Section
完全背包问题
\end_layout

\begin_layout Subsection
题目
\end_layout

\begin_layout Standard
有
\begin_inset Formula $N$
\end_inset

种物品和一个容量为
\begin_inset Formula $V$
\end_inset

的背包，每种物品都有无限件可用。放入第
\begin_inset Formula $i$
\end_inset

种物品的耗费的空间是
\begin_inset Formula $C_{i}$
\end_inset

，得到的价值是
\begin_inset Formula $W_{i}$
\end_inset

。求解：将哪些物品装入背包，可使这些物品的耗费的空间总和不超过背包容量，且价值总和最大。
\end_layout

\begin_layout Subsection
基本思路 
\end_layout

\begin_layout Standard
这个问题非常类似于01背包问题，所不同的是每种物品有无限件。也就是从每种物品的角度考虑，与它相关的策略已并非取或不取两种，而是有取
\begin_inset Formula $0$
\end_inset

件、取
\begin_inset Formula $1$
\end_inset

件、取
\begin_inset Formula $2$
\end_inset

件……直至取
\begin_inset Formula $\left\lfloor V/C_{i}\right\rfloor $
\end_inset

件等很多种。
\end_layout

\begin_layout Standard
如果仍然按照解01背包时的思路，令
\begin_inset Formula $F[i,v]$
\end_inset

表示前
\begin_inset Formula $i$
\end_inset

种物品恰放入一个容量为
\begin_inset Formula $v$
\end_inset

的背包的最大权值。仍然可以按照每种物品不同的策略写出状态转移方程，像这样：
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
F[i,v]=\mathrm{max}\{F[i-1,v-kC_{i}]+kW_{i}\:|\:0\leq kC_{i}\leq v\}
\]

\end_inset


\end_layout

\begin_layout Standard
这跟01背包问题一样有
\begin_inset Formula $O(VN)$
\end_inset

个状态需要求解，但求解每个状态的时间已经不是常数了，求解状态
\begin_inset Formula $F[i,v]$
\end_inset

的时间是
\begin_inset Formula $O(\frac{v}{C_{i}})$
\end_inset

，总的复杂度可以认为是
\begin_inset Formula $O(NV\Sigma{\frac{{V}}{C_{i}}})$
\end_inset

，是比较大的。
\end_layout

\begin_layout Standard
将01背包问题的基本思路加以改进，得到了这样一个清晰的方法。这说明01背包问题的方程的确是很重要，可以推及其它类型的背包问题。但我们还是要试图改进这个复杂度。
\end_layout

\begin_layout Subsection
一个简单有效的优化 
\end_layout

\begin_layout Standard
完全背包问题有一个很简单有效的优化，是这样的：若两件物品
\begin_inset Formula $i$
\end_inset

、
\begin_inset Formula $j$
\end_inset

满足
\begin_inset Formula $C_{i}\leq C_{j}$
\end_inset

且
\begin_inset Formula $W_{i}\geq W_{j}$
\end_inset

，则将可以将物品
\begin_inset Formula $j$
\end_inset

直接去掉，不用考虑。
\end_layout

\begin_layout Standard
这个优化的正确性是显然的：任何情况下都可将价值小耗费高的
\begin_inset Formula $j$
\end_inset

换成物美价廉的
\begin_inset Formula $i$
\end_inset

，得到的方案至少不会更差。对于随机生成的数据，这个方法往往会大大减少物品的件数，从而加快速度。然而这个并不能改善最坏情况的复杂度，因为有可能特别设计的数据可以一
件物品也去不掉。
\end_layout

\begin_layout Standard
这个优化可以简单的
\begin_inset Formula $O(N^{2})$
\end_inset

地实现，一般都可以承受。另外，针对背包问题而言，比较不错的一种方法是：首先将费用大于
\begin_inset Formula $V$
\end_inset

的物品去掉，然后使用类似计数排序的做法，计算出费用相同的物品中价值最高的是哪个，可以
\begin_inset Formula $O(V+N)$
\end_inset

地完成这个优化。这个不太重要的过程就不给出伪代码了，希望你能独立思考写出伪代码或程序。
\end_layout

\begin_layout Subsection
转化为01背包问题求解
\end_layout

\begin_layout Standard
01背包问题是最基本的背包问题，我们可以考虑把完全背包问题转化为01背包问题来解。
\end_layout

\begin_layout Standard
最简单的想法是，考虑到第
\begin_inset Formula $i$
\end_inset

种物品最多选
\begin_inset Formula $\left\lfloor \text{\frac{{V}}{C_{i}}}\right\rfloor $
\end_inset

件，于是可以把第i种物品转化为
\begin_inset Formula $\left\lfloor \text{\frac{{V}}{C_{i}}}\right\rfloor $
\end_inset

件费用及价值均不变的物品，然后求解这个01背包问题。这样的做法完全没有改进时间复杂度，但这种方法也指明了将完全背包问题转化为01背包问题的思路：将一种物品拆成多
件只能选
\begin_inset Formula $0$
\end_inset

件或
\begin_inset Formula $1$
\end_inset

件的01背包中的物品。
\end_layout

\begin_layout Standard
更高效的转化方法是：把第
\begin_inset Formula $i$
\end_inset

种物品拆成费用为
\begin_inset Formula $C_{i}2^{k}$
\end_inset

、价值为
\begin_inset Formula $W_{i}2^{k}$
\end_inset

的若干件物品，其中
\begin_inset Formula $k$
\end_inset

取遍满足
\begin_inset Formula $C_{i}2^{k}\leq V$
\end_inset

的非负整数。
\end_layout

\begin_layout Standard
这是二进制的思想。因为，不管最优策略选几件第
\begin_inset Formula $i$
\end_inset

种物品，其件数写成二进制后，总可以表示成若干个
\begin_inset Formula $2^{k}$
\end_inset

件物品的和。这样一来就把每种物品拆成
\begin_inset Formula $O(\mathrm{log}\text{\frac{{V}}{C_{i}}})$
\end_inset

件物品，是一个很大的改进。
\end_layout

\begin_layout Subsection
\begin_inset Formula $O(VN)$
\end_inset

的算法
\end_layout

\begin_layout Standard
这个算法使用一维数组，先看伪代码：
\end_layout

\begin_layout LyX-Code
\begin_inset Formula $F[0..V]=0$
\end_inset


\end_layout

\begin_layout LyX-Code
for 
\begin_inset Formula $i$
\end_inset

 = 
\begin_inset Formula $1$
\end_inset

 to 
\begin_inset Formula $N$
\end_inset


\end_layout

\begin_layout LyX-Code
    for 
\begin_inset Formula $v$
\end_inset

 = 
\begin_inset Formula $C_{i}$
\end_inset

 to 
\begin_inset Formula $V$
\end_inset


\end_layout

\begin_layout LyX-Code
        
\begin_inset Formula $F[v]$
\end_inset

 = 
\begin_inset Formula $\mathrm{max}(F[v],F[v-C_{i}]+W_{i})$
\end_inset


\end_layout

\begin_layout Standard
你会发现，这个伪代码与01背包问题的伪代码只有
\begin_inset Formula $v$
\end_inset

的循环次序不同而已。
\end_layout

\begin_layout Standard
为什么这个算法就可行呢？首先想想为什么01背包中要按照
\begin_inset Formula $v$
\end_inset

递减的次序来循环。让
\begin_inset Formula $v$
\end_inset

递减是为了保证第
\begin_inset Formula $i$
\end_inset

次循环中的状态
\begin_inset Formula $F[i,v]$
\end_inset

是由状态
\begin_inset Formula $F[i-1,v-C_{i}]$
\end_inset

递推而来。换句话说，这正是为了保证每件物品只选一次，保证在考虑“选入第
\begin_inset Formula $i$
\end_inset

件物品”这件策略时，依据的是一个绝无已经选入第
\begin_inset Formula $i$
\end_inset

件物品的子结果
\begin_inset Formula $F[i-1,v-C_{i}]$
\end_inset

。而现在完全背包的特点恰是每种物品可选无限件，所以在考虑“加选一件第
\begin_inset Formula $i$
\end_inset

种物品”这种策略时，却正需要一个可能已选入第
\begin_inset Formula $i$
\end_inset

种物品的子结果
\begin_inset Formula $F[i,v-C_{i}]$
\end_inset

，所以就可以并且必须采用
\begin_inset Formula $v$
\end_inset

递增的顺序循环。这就是这个简单的程序为何成立的道理。
\end_layout

\begin_layout Standard
值得一提的是，上面的伪代码中两层for循环的次序可以颠倒。这个结论有可能会带来算法时间常数上的优化。
\end_layout

\begin_layout Standard
这个算法也可以由另外的思路得出。例如，将基本思路中求解
\begin_inset Formula $F[i,v-C_{i}]$
\end_inset

的状态转移方程显式地写出来，代入原方程中，会发现该方程可以等价地变形成这种形式：
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
F[i,v]=\mathrm{max(}{F[i-1,v],F[i,v-C_{i}]+W_{i}})
\]

\end_inset


\end_layout

\begin_layout Standard
将这个方程用一维数组实现，便得到了上面的伪代码。
\end_layout

\begin_layout Standard
最后抽象出处理一件完全背包类物品的过程伪代码：
\end_layout

\begin_layout LyX-Code
def 
\begin_inset Formula $\mathsf{CompletePack}$
\end_inset

(
\begin_inset Formula $F,C,W$
\end_inset

)
\end_layout

\begin_layout LyX-Code
    for 
\begin_inset Formula $v$
\end_inset

 = 
\begin_inset Formula $C$
\end_inset

 to 
\begin_inset Formula $V$
\end_inset


\end_layout

\begin_layout LyX-Code
        
\begin_inset Formula $F[v]$
\end_inset

 = 
\begin_inset Formula $\mathrm{max}\{F[v],f[v-C]+W\}$
\end_inset


\end_layout

\begin_layout Subsection
总结
\end_layout

\begin_layout Standard
完全背包问题也是一个相当基础的背包问题，它有两个状态转移方程。希望你能够对这两个状态转移方程都仔细地体会，不仅记住，也要弄明白它们是怎么得出来的，最好能够自己想
一种得到这些方程的方法。
\end_layout

\begin_layout Standard
事实上，对每一道动态规划题目都思考其方程的意义以及如何得来，是加深对动态规划的理解、提高动态规划功力的好方法。
\end_layout

\begin_layout Section
多重背包问题
\end_layout

\begin_layout Subsection
题目
\end_layout

\begin_layout Standard
有
\begin_inset Formula $N$
\end_inset

种物品和一个容量为
\begin_inset Formula $V$
\end_inset

的背包。第
\begin_inset Formula $i$
\end_inset

种物品最多有
\begin_inset Formula $M_{i}$
\end_inset

件可用，每件耗费的空间是
\begin_inset Formula $C_{i}$
\end_inset

，价值是
\begin_inset Formula $W_{i}$
\end_inset

。求解将哪些物品装入背包可使这些物品的耗费的空间总和不超过背包容量，且价值总和最大。
\end_layout

\begin_layout Subsection
基本算法
\end_layout

\begin_layout Standard
这题目和完全背包问题很类似。基本的方程只需将完全背包问题的方程略微一改即可。
\end_layout

\begin_layout Standard
因为对于第
\begin_inset Formula $i$
\end_inset

种物品有
\begin_inset Formula $M_{i}+1$
\end_inset

种策略：取
\begin_inset Formula $0$
\end_inset

件，取
\begin_inset Formula $1$
\end_inset

件……取
\begin_inset Formula $M_{i}$
\end_inset

件。令
\begin_inset Formula $F[i,v]$
\end_inset

表示前
\begin_inset Formula $i$
\end_inset

种物品恰放入一个容量为
\begin_inset Formula $v$
\end_inset

的背包的最大价值，则有状态转移方程：
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
F[i\text{，}v]=\mathrm{max}\{F[i-1,v-k*C_{i}]+k*W_{i}\:|\:0\leq k\leq M_{i}\}
\]

\end_inset


\end_layout

\begin_layout Standard
复杂度是
\begin_inset Formula $O(V\Sigma M_{i})$
\end_inset

。
\end_layout

\begin_layout Subsection
转化为01背包问题
\end_layout

\begin_layout Standard
另一种好想好写的基本方法是转化为01背包求解：把第
\begin_inset Formula $i$
\end_inset

种物品换成
\begin_inset Formula $M_{i}$
\end_inset

件01背包中的物品，则得到了物品数为
\begin_inset Formula $\Sigma M_{i}$
\end_inset

的01背包问题。直接求解之，复杂度仍然是
\begin_inset Formula $O(V\Sigma M_{i})$
\end_inset

。
\end_layout

\begin_layout Standard
但是我们期望将它转化为01背包问题之后，能够像完全背包一样降低复杂度。
\end_layout

\begin_layout Standard
仍然考虑二进制的思想，我们考虑把第
\begin_inset Formula $i$
\end_inset

种物品换成若干件物品，使得原问题中第
\begin_inset Formula $i$
\end_inset

种物品可取的每种策略——取
\begin_inset Formula $0\ldots M_{i}$
\end_inset

件——均能等价于取若干件代换以后的物品。另外，取超过
\begin_inset Formula $M_{i}$
\end_inset

件的策略必不能出现。
\end_layout

\begin_layout Standard
方法是：将第
\begin_inset Formula $i$
\end_inset

种物品分成若干件01背包中的物品，其中每件物品有一个系数。这件物品的费用和价值均是原来的费用和价值乘以这个系数。令这些系数分别为
\begin_inset Formula $1,2,2^{2}\ldots2^{k-1},M_{i}-2^{k}+1$
\end_inset

，且
\begin_inset Formula $k$
\end_inset

是满足
\begin_inset Formula $M_{i}-2^{k}+1>0$
\end_inset

的最大整数。例如，如果
\begin_inset Formula $M_{i}$
\end_inset

为
\begin_inset Formula $13$
\end_inset

，则相应的
\begin_inset Formula $k=3$
\end_inset

，这种最多取
\begin_inset Formula $13$
\end_inset

件的物品应被分成系数分别为
\begin_inset Formula $1,2,4,6$
\end_inset

的四件物品。
\end_layout

\begin_layout Standard
分成的这几件物品的系数和为
\begin_inset Formula $M_{i}$
\end_inset

，表明不可能取多于
\begin_inset Formula $M_{i}$
\end_inset

件的第
\begin_inset Formula $i$
\end_inset

种物品。另外这种方法也能保证对于
\begin_inset Formula $0\ldots M_{i}$
\end_inset

间的每一个整数，均可以用若干个系数的和表示。这里算法正确性的证明可以分
\begin_inset Formula $0\ldots2^{k-1}$
\end_inset

和
\begin_inset Formula $2^{k}\ldots M_{i}$
\end_inset

两段来分别讨论得出，希望读者自己思考尝试一下。
\end_layout

\begin_layout Standard
这样就将第i种物品分成了
\begin_inset Formula $O(\mathrm{log}M_{i})$
\end_inset

种物品，将原问题转化为了复杂度为
\begin_inset Formula $O(V\Sigma\mathrm{{log}M_{i})}$
\end_inset

的01背包问题，是很大的改进。
\end_layout

\begin_layout Standard
下面给出
\begin_inset Formula $O(\mathrm{log}M)$
\end_inset

时间处理一件多重背包中物品的过程：
\end_layout

\begin_layout LyX-Code
def 
\begin_inset Formula $\mathsf{MultiplePack}$
\end_inset

(
\begin_inset Formula $F$
\end_inset

,
\begin_inset Formula $C$
\end_inset

,
\begin_inset Formula $W$
\end_inset

,
\begin_inset Formula $M$
\end_inset

)
\end_layout

\begin_layout LyX-Code
    if 
\begin_inset Formula $C\cdot M\geq V$
\end_inset


\end_layout

\begin_layout LyX-Code
        
\begin_inset Formula $\mathsf{CompletePack}$
\end_inset

(
\begin_inset Formula $F$
\end_inset

,
\begin_inset Formula $C$
\end_inset

,
\begin_inset Formula $W$
\end_inset

)
\end_layout

\begin_layout LyX-Code
        return
\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $k:=1$
\end_inset


\end_layout

\begin_layout LyX-Code
    while 
\begin_inset Formula $k<M$
\end_inset


\end_layout

\begin_layout LyX-Code
        
\begin_inset Formula $\mathsf{ZeroOnePack}$
\end_inset

(
\begin_inset Formula $kC$
\end_inset

,
\begin_inset Formula $kW$
\end_inset

)
\end_layout

\begin_layout LyX-Code
        
\begin_inset Formula $M:=M-k$
\end_inset


\end_layout

\begin_layout LyX-Code
        
\begin_inset Formula $k:=2k$
\end_inset


\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $\mathsf{ZeroOnePack}$
\end_inset

(
\begin_inset Formula $C\cdot M$
\end_inset

,
\begin_inset Formula $W\cdot M$
\end_inset

) 
\end_layout

\begin_layout Standard
希望你仔细体会这个伪代码，如果不太理解的话，不妨翻译成程序代码以后，单步执行几次，或者头脑加纸笔模拟一下，以加深理解。
\end_layout

\begin_layout Subsection
\begin_inset Formula $\text{O(VN)}$
\end_inset

的算法
\end_layout

\begin_layout Standard
多重背包问题同样有
\begin_inset Formula $O(VN)$
\end_inset

复杂度的算法。这个算法基于基本算法的状态转移方程，但应用单调队列的方法使每个状态的值可以以均摊
\begin_inset Formula $O(1)$
\end_inset

的时间求解。我最初了解到这个方法是在楼天成的“男人八题”幻灯片上。（TODO：是否在此插入单调队列的讲解呢？）
\end_layout

\begin_layout Subsection
小结 
\end_layout

\begin_layout Standard
在这一讲中，我们看到了将一个算法的复杂度由
\begin_inset Formula $O(V\Sigma M_{i})$
\end_inset

改进到
\begin_inset Formula $O(V\Sigma\mathrm{{log}M_{i})}$
\end_inset

的过程，还知道了存在复杂度为
\begin_inset Formula $O(VN)$
\end_inset

的算法。
\end_layout

\begin_layout Standard
希望你特别注意“拆分物品”的思想和方法，自己证明一下它的正确性，并将完整的程序代码写出来。
\end_layout

\begin_layout Section
混合三种背包问题
\end_layout

\begin_layout Subsection
问题
\end_layout

\begin_layout Standard
如果将前面的三种背包问题混合起来。也就是说，有的物品只可以取一次（01背包），有的物品可以取无限次（完全背包），有的物品可以取的次数有一个上限（多重背包）。应该
怎么求解呢？
\end_layout

\begin_layout Subsection
01背包与完全背包的混合
\end_layout

\begin_layout Standard
考虑到01背包和完全背包中给出的伪代码只有一处不同，故如果只有两类物品：一类物品只能取一次，另一类物品可以取无限次，那么只需在对每个物品应用转移方程时，根据物品
的类别选用顺序或逆序的循环即可，复杂度是
\begin_inset Formula $O(VN)$
\end_inset

。伪代码如下：
\end_layout

\begin_layout LyX-Code
for 
\begin_inset Formula $i=1$
\end_inset

 to 
\begin_inset Formula $N$
\end_inset


\end_layout

\begin_layout LyX-Code
    if 第
\begin_inset Formula $i$
\end_inset

件物品属于01背包
\end_layout

\begin_layout LyX-Code
        for 
\begin_inset Formula $v=V$
\end_inset

 to 
\begin_inset Formula $C_{i}$
\end_inset


\end_layout

\begin_layout LyX-Code
            
\begin_inset Formula $F[v]$
\end_inset

 = 
\begin_inset Formula $\mathrm{max}(F[v],F[v-C_{i}]+W_{i})$
\end_inset


\end_layout

\begin_layout LyX-Code
    else if 第
\begin_inset Formula $i$
\end_inset

件物品属于完全背包
\end_layout

\begin_layout LyX-Code
        for 
\begin_inset Formula $v=C_{i}$
\end_inset

 to 
\begin_inset Formula $V$
\end_inset


\end_layout

\begin_layout LyX-Code
            
\begin_inset Formula $F[v]$
\end_inset

 = 
\begin_inset Formula $\mathrm{max}(F[v],F[v-C_{i}]+W_{i})$
\end_inset


\end_layout

\begin_layout Subsection
再加上多重背包 
\end_layout

\begin_layout Standard
如果再加上最多可以取有限次的多重背包式的物品，那么利用单调队列，也可以给出均摊
\begin_inset Formula $O(VN)$
\end_inset

的解法。
\end_layout

\begin_layout Standard
但如果不考虑单调队列算法的话，用将每个这类物品分成
\begin_inset Formula $\text{O(\mathrm{log}}M_{i})$
\end_inset

个01背包的物品的方法也已经很优了。
\end_layout

\begin_layout Standard
当然，最清晰的写法是调用我们前面给出的三个过程。
\end_layout

\begin_layout LyX-Code
for 
\begin_inset Formula $i=1$
\end_inset

 to 
\begin_inset Formula $N$
\end_inset


\end_layout

\begin_layout LyX-Code
    if 第
\begin_inset Formula $i$
\end_inset

件物品属于01背包
\end_layout

\begin_layout LyX-Code
        
\begin_inset Formula $\mathsf{ZeroOnePack}$
\end_inset

(
\begin_inset Formula $F$
\end_inset

,
\begin_inset Formula $C_{i}$
\end_inset

,
\begin_inset Formula $W_{i}$
\end_inset

)
\end_layout

\begin_layout LyX-Code
    else if 第
\begin_inset Formula $i$
\end_inset

件物品属于完全背包
\end_layout

\begin_layout LyX-Code
        
\begin_inset Formula $\mathsf{CompletePack}$
\end_inset

(
\begin_inset Formula $F$
\end_inset

,
\begin_inset Formula $C_{i}$
\end_inset

,
\begin_inset Formula $W_{i}$
\end_inset

)
\end_layout

\begin_layout LyX-Code
    else if 第
\begin_inset Formula $i$
\end_inset

件物品属于多重背包
\end_layout

\begin_layout LyX-Code
        
\begin_inset Formula $\mathsf{MultiplePack}$
\end_inset

(
\begin_inset Formula $F$
\end_inset

,
\begin_inset Formula $C_{i}$
\end_inset

,
\begin_inset Formula $W_{i}$
\end_inset

,
\begin_inset Formula $N_{i}$
\end_inset

)
\end_layout

\begin_layout Standard
在最初写出这三个过程的时候，可能完全没有想到它们会在这里混合应用。我想这体现了编程中抽象的威力。如果你一直就是以这种“抽象出过程”的方式写每一类背包问题的，也非
常清楚它们的实现中细微的不同，那么在遇到混合三种背包问题的题目时，一定能很快想到上面简洁的解法，对吗？
\end_layout

\begin_layout Subsection
小结
\end_layout

\begin_layout Standard
有人说，困难的题目都是由简单的题目叠加而来的。这句话是否公理暂且存之不论，但它在本讲中已经得到了充分的体现。本来01背包、完全背包、多重背包都不是什么难题，但将
它们简单地组合起来以后就得到了这样一道一定能吓倒不少人的题目。但只要基础扎实，领会三种基本背包问题的思想，就可以做到把困难的题目拆分成简单的题目来解决。
\end_layout

\begin_layout Standard

\end_layout

\begin_layout LyX-Code

\end_layout

\end_body
\end_document
