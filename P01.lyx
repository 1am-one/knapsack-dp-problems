#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
P01: 01背包问题
\end_layout

\begin_layout Section
题目
\end_layout

\begin_layout Standard
有
\begin_inset Formula $N$
\end_inset

件物品和一个容量为
\begin_inset Formula $V$
\end_inset

的背包。放入第
\begin_inset Formula $i$
\end_inset

件物品耗费的空间是
\begin_inset Formula $C_{i}$
\end_inset

，得到的价值是
\begin_inset Formula $W_{i}$
\end_inset

。求解将哪些物品装入背包可使价值总和最大。
\end_layout

\begin_layout Section
基本思路
\end_layout

\begin_layout Standard
这是最基础的背包问题，特点是：每种物品仅有一件，可以选择放或不放。
\end_layout

\begin_layout Standard
用子问题定义状态：即
\begin_inset Formula $F[i,v]$
\end_inset

表示前
\begin_inset Formula $i$
\end_inset

件物品恰放入一个容量为
\begin_inset Formula $v$
\end_inset

的背包可以获得的最大价值。则其状态转移方程便是：
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
F[i,v]=\mathrm{max}\{F[i-1,v],F[i-1,v-C_{i}]+W_{i}\}
\]

\end_inset


\end_layout

\begin_layout Standard
这个方程非常重要，基本上所有跟背包相关的问题的方程都是由它衍生出来的。所以有必要将它详细解释一下：“将前
\begin_inset Formula $i$
\end_inset

件物品放入容量为
\begin_inset Formula $v$
\end_inset

的背包中”这个子问题，若只考虑第
\begin_inset Formula $i$
\end_inset

件物品的策略（放或不放），那么就可以转化为一个只和前
\begin_inset Formula $i-1$
\end_inset

件物品相关的问题。如果不放第
\begin_inset Formula $i$
\end_inset

件物品，那么问题就转化为“前
\begin_inset Formula $i-1$
\end_inset

件物品放入容量为
\begin_inset Formula $v$
\end_inset

的背包中”，价值为
\begin_inset Formula $F[i-1,v]$
\end_inset

；如果放第
\begin_inset Formula $i$
\end_inset

件物品，那么问题就转化为“前
\begin_inset Formula $i-1$
\end_inset

件物品放入剩下的容量为
\begin_inset Formula $v-C_{i}$
\end_inset

的背包中”，此时能获得的最大价值就是
\begin_inset Formula $F[i-1,v-C_{i}]$
\end_inset

再加上通过放入第
\begin_inset Formula $i$
\end_inset

件物品获得的价值
\begin_inset Formula $W_{i}$
\end_inset

。
\end_layout

\begin_layout Standard
伪代码如下：
\end_layout

\begin_layout LyX-Code
for 
\begin_inset Formula $i$
\end_inset

 = 
\begin_inset Formula $1$
\end_inset

 to 
\begin_inset Formula $N$
\end_inset


\end_layout

\begin_layout LyX-Code
    
\begin_inset Formula $F[i,0]$
\end_inset

 = 
\begin_inset Formula $0$
\end_inset


\end_layout

\begin_layout LyX-Code
    for 
\begin_inset Formula $v$
\end_inset

 = 
\begin_inset Formula $C_{i}$
\end_inset

 to 
\begin_inset Formula $V$
\end_inset


\end_layout

\begin_layout LyX-Code
        
\begin_inset Formula $F[i,v]$
\end_inset

 = 
\begin_inset Formula $\mathrm{max}\{F[i-1,v],F[i-1,v-C_{i}]+W_{i}\}$
\end_inset


\end_layout

\begin_layout Section
优化空间复杂度 
\end_layout

\begin_layout Standard
以上方法的时间和空间复杂度均为
\begin_inset Formula $O(VN)$
\end_inset

，其中时间复杂度应该已经不能再优化了，但空间复杂度却可以优化到
\begin_inset Formula $O(V)$
\end_inset

。
\end_layout

\begin_layout Standard
先考虑上面讲的基本思路如何实现，肯定是有一个主循环
\begin_inset Formula $i=1..N$
\end_inset

，每次算出来二维数组
\begin_inset Formula $F[i,0..V]$
\end_inset

的所有值。那么，如果只用一个数组
\begin_inset Formula $F[0..V]$
\end_inset

，能不能保证第
\begin_inset Formula $i$
\end_inset

次循环结束后
\begin_inset Formula $F[v]$
\end_inset

中表示的就是我们定义的状态
\begin_inset Formula $F[i,v]$
\end_inset

呢？
\begin_inset Formula $F[i,v]$
\end_inset

是由
\begin_inset Formula $F[i-1,v]$
\end_inset

和
\begin_inset Formula $F[i-1,v-C_{i}]$
\end_inset

两个子问题递推而来，能否保证在推
\begin_inset Formula $F[i,v]$
\end_inset

时（也即在第
\begin_inset Formula $i$
\end_inset

次主循环中推
\begin_inset Formula $F[v]$
\end_inset

时）能够取用
\begin_inset Formula $F[i-1,v]$
\end_inset

和
\begin_inset Formula $F[i-1,v-C_{i}]$
\end_inset

的值呢？事实上，这要求在每次主循环中我们以
\begin_inset Formula $v=V..0$
\end_inset

的递减顺序计算
\begin_inset Formula $F[v]$
\end_inset

，这样才能保证推
\begin_inset Formula $F[v]$
\end_inset

时
\begin_inset Formula $F[v-C_{i}]$
\end_inset

保存的是状态
\begin_inset Formula $F[i-1,v-C_{i]}$
\end_inset

的值。伪代码如下：
\end_layout

\begin_layout LyX-Code
for 
\begin_inset Formula $i$
\end_inset

 = 
\begin_inset Formula $1$
\end_inset

 to 
\begin_inset Formula $N$
\end_inset


\end_layout

\begin_layout LyX-Code
    for 
\begin_inset Formula $v$
\end_inset

 = 
\begin_inset Formula $V$
\end_inset

 to 
\begin_inset Formula $C_{i}$
\end_inset


\end_layout

\begin_layout LyX-Code
        
\begin_inset Formula $F[v]$
\end_inset

 = 
\begin_inset Formula $\mathrm{max}\{F[v],F[v-C_{i}]+W_{i}\}$
\end_inset


\end_layout

\begin_layout Standard
其中的
\begin_inset Formula $F[v]=\mathrm{max}\{F[v],F[v-C_{i}]+W_{i}\}$
\end_inset

一句，恰就相当于我们的转移方程
\begin_inset Formula $F[i,v]=\mathrm{max}\{F[i-1,v],F[i-1,v-C_{i}]+W_{i}\}$
\end_inset

，因为现在的
\begin_inset Formula $F[v-C_{i}]$
\end_inset

就相当于原来的
\begin_inset Formula $F[i-1,v-C_{i}]$
\end_inset

。如果将
\begin_inset Formula $v$
\end_inset

的循环顺序从上面的逆序改成顺序的话，那么则成了
\begin_inset Formula $F[i,v]$
\end_inset

由
\begin_inset Formula $F[i,v-C_{i}]$
\end_inset

推导得到，与本题意不符，但它却是另一个重要的背包问题——完全背包问题——最简捷的解决方案，故学习只用一维数组解01背包问题是十分必要的。
\end_layout

\end_body
\end_document
